
... : 스프레드 연산자
리액트에서는 스프레드 연산자를 자주 사용함
이유 : 리액트 불변성 원칙 때문에
  - 리액트의 특성은 기존 상태를 직접 수정했을때 감지를 못하기 때문에
    리렌더링이 제대로 발생하지 않을 수 있음.


React에서 props
React에서는 props가 읽기 전용(immutable) 속성이며, 
부모에서 자식에게 데이터를 전달하는 방식.

Vue.js에서 props
Vue에서는 props가 data와 유사하지만, 
부모에서 자식에게만 전달되며, 자식 컴포넌트에서 직접 수정할 수 없음

공통적인 props 특징
단방향 데이터 흐름 : 부모 → 자식 방향으로만 전달됨
읽기 전용 : 자식 컴포넌트에서 직접 변경할 수 없음 
           (Vue의 경우 $emit을 사용해 부모에게 요청)
유지보수성을 높이는 역할 : 컴포넌트 간 데이터 전달을 깔끔하게 관리



useMemo, useCallback
메모장이라고 한 이유
 - 메모리에 값을 등록하여 다시 계산할 필요 없도록 하는 개념

useMemo, useCallback를 사용하는 이유
 - 성능최적화, 불필요한 실행 방지

memo : 계산한 값을 기억하는 훅
       답을 미리 계산해뒀다 필요할때 꺼내보는 개념
callback : 함수 자체를 기억하는 훅
           문제풀이 자체를 기억하는 개념



useMemo, useCallback을 활용하는 리액트 성능 최적화 전략
1. 의존성 배열의 선언과 최적화
2. 조건문 메모리제이션
3. 중첩 메모리제이션 처리



커스텀 훅
 상태로직을 재사용 할 수 있도록 하는 기능
 함수 이름을 정의해놓고 useState, useEffect 등을 사용하여 구현

 커스텀훅 = 컴포넌트 재사용성의 궁극의 정수
  - 기존 컴포넌트 구성코드의 중복도 줄일수 있다는 장점
  - API 호출, 폼데이터 관리, 중복되는 애니메이션 기능들을
    커스텀 훅으로 만들어서 사용
 


라우터
리액트 라우터 패키지 설치
리액트의 라우터 제어관련 패키지는 매우 많음
npm install -D react-router-dom

라우팅 : 사용자가 요청하는 URL 에 따라 적절한 페이지를 보여주는 기능
 - React, vue의 경우는 SPA를 통해 JS를 활용하여 페이지 전환을
 클라이언트단에서 처리하는 방식
 SPA 기반 라우팅 특징
 - URL 변경시 컨텐츠가 변경
 - 브라우저 새로고침 없이 페이지 전환 가능(비동기와 유사)
 - 상태유지가 가능하다는 특징도 있음

동적 라우팅
 - URL의 파라미터를 활용하여 하나의 라우트 컴포넌트로 
   여러 다른 컨텐츠를 표시하는 기능
 - 사용자의 입력, 상태변화, 또는 다양한 조건에 따라
   서버가 어떤 페이지, 리소스를 제공할지 결정한다
 - 일반 라우팅(정적 라우팅)과 비교하자면 
   경로의 고정 vs 실행시점에 결됭되느냐 차이

Path Parameter : URL 경로에서 변할 수 있는 부분
                 (URL 구조에 포함되어있음)
예시 )
<Route path="/about/:Parameter" element={<About />} />
 -> 페이지 보여주기에 많이 활용 (페이징 처리)

Query Parameter : URL의 ? 뒤에 Key=Value 형태로 
                  여러가지 정보를 전달하는 방식
 - 필터링이나 페이지 이동 기능 구현시 사용


React Router 의 주요 컴포넌트
1. BroswerRouter : 최상위 컴포넌트를 감싸주는 메인 라우터 컴포넌트
 - 서버에 있는 데이터들을 스크립트에 의해 가공 처리후 생성하여 전달되는 페이지
2. Routes : Route를 감싸는 컨테이너
3. Route : 실제 경로와 컴포넌트를 감싸는 컴포넌트
4. HashRouter : 정적인 페이지에 사용하는 라우터
 - 미리 저장된 페이지가 그대로 보여짐

라우팅과 관련된 훅
1. useParams : url의 파라미터를 추출하는 훅
2. useNavigate : 페이지 이동을 제어하는 훅
3. useLocation : 쿼리파라미터(쿼리스트링) 내용을 처리하는 훅
4. useSearchParams : URL의 쿼리스트링 관리 -> 검색, 필터링 기능 구현시 사용

라우팅 패턴
1. 기본 라우팅(정적 라우팅) : 이미 경로를 설정한 경우
 -> 메인, 소개 페이지
2. 동적 라우팅
 -> 상세페이지, 사용자 프로핑
3. 중첩 라우팅
 -> 하위 라우트 구성, 레이아웃을 공유할때 사용
