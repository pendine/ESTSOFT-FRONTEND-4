React란
  - js 기반의 라이브러리 혹은 프레임워크

라이브러리나 프레임워크를 사용하는 이유
  - (단순) 개발 편하게 하려고

react는 js를 사용하는것보다 어려움
  - 그럼에도 react를 사용하는 이유 - SPA 기반의 개발을 위해서
  - spa가 필요한 이유 - 사용자에게 부드러운 화면 제공을 위해서.
  - spa는 바닐라js보다 react를 사용하면 더 쉽고 빠르게 개발 가능


Vue 장점
1. 입문 쉬움 - 기능 강력
2. 재사용성의 극대화. 유지보수 준수
3. 데이터 변경시 빠른 반영

Vue 단점
1. 테스트 어려움
2. 커뮤니티 부족


React 장점
1. 재사용성의 극대화. 유지보수 준수
2. 데이터 변경시 빠른 반영
3. 안정성이 많은 패치로 인해 보장되는편 (패치가 잦다 = 버전별 안정성이 다름)
4. 제공되는 자료가 많음
5. vue대비 성능최적화 우수

React 단점
1. js를 기본적으로 매우 잘해야함
2. ajax 사용 불가
3. 규모가 커지면 속도 저하

react와 vue의 공통점
1. 가상DOM 활용 (react가 가상 DOM을 버린다는 루머 존재)
2. 컴포넌트 기반 개발
3. 코어 라이브러리에만 집중하고 있음

차이점
1. 데이터 바인딩 방식이 다름
(react 단방향, vue 양방향)
2. react는 JSX라는 형태로 코드를 작성
  -> JSX로 인해서 난이도 상승 (JSX: JavaScript를 확장한 문법)
3. vue의 가상DOM 구현 자체가 react보다 빠름
4. react는 jsx가 어렵지만 jsx의 많은 툴을 통해 vue보다 진보된 기능을 제공
5. vue의 진입 장벽이 낮음


vue : 프로젝트 기간을 얼마 안될때 , 소규모 프로젝트
react : 확장성이 좋기 때문에, 
        숙련된 개발자들과 함께한다는 전제로
        대규모 프로젝트에 사용

리액트 역사
초기버전 : 클래스 기반의 컴포넌트로 구성
          jsx가 도입, 클래스와 프로토타입에 대한 개념을 모르면 어려움
15버전 : SVG, HTML 지원, PureComponent -> document.createElement를 수정해서 성능개선
16버전 : Fiber엔진 도입 (우리가 아는 리액트에 근접. 
                       포탈개념 도입(vue의 텔레포트),
                       Hooks(useState, useEffect), 
                       클래스 기반의 컴포넌트 -> 함수형 패러다임 추가)
17버전 : 성능최적화 (이벤트처리 관련 패치위주)
18버전 : UI 반응성, 자동 배칭 시스템 추가

babel과 webpack
babel : js 트랜스파일러
 - 최신 자바스크립트 문법을 지원받을 수 있도록 내용을 제공해주는 패키지
  (해당 브라우저가 최신 자바스크립트 문법을 지원하지 않아도 
   최신 문법으로 작성된 코드들이 잘 돌아갈 수 있도록 변환)
webpack : 모듈 통합 패키지 (배포를 위해 사용)


1. npx 설치 - npm install npx -g
2. npx create-react-app 프로젝트명
npx create-react-app react1

버전 지정 설치
npm install react@18.3.1 react-dom@18.3.1

최신버전설치 -> 다운그레이드
1. npx create-react-app react1
   (설치시 에러 발생함 : 현재 설치된 npm 버전이 낮아서 정상. 
   아래의 버전 설치는 전부 오류로그에서 확인 되는 요구 버전을 설치하는 명령어)
2. npm install --save react@^18.0.0 react-dom@18.0.0
3. npm install @testing-library/react@13.4.0
4. npm i web-vitals --save-dev

실행시 해당 프로젝트 폴더로 이동 후 npm start


리액트에서 자주 나오는 ES6 개념들
  - 클래스, 화살표함수, 배열, 스프레드 문법(연산), 삼항연산자, 모듈

중요개념 : jsx, 컴포넌트, props, 훅, 라우팅, redux

리액트 기초
SPA를 사용하기 위한 react

리액트 목표
- 여러방법으로 웹 페이지에서 HTML을 렌더링
- 컴포넌트들을 제작하여 root에 뿌리는 형식

createRoot 함수 : react 구성요소가 표시될 html요소를 정의하는 함수
  - 최종적으로 index.html 파일에 모든 것을 렌더링
  app.js -> index.js -> index.html 파일로 전달되는 구조


jsx : JavaScript XML의 약자
 - 목적 : react에서 html 구현시 사용하는 문법.
 - jsx는 html 태그를 react요소로 변환
 - 리액트의 시작은 JSX에 적응
 - 주의사항 : 꼭 JSX로 안해도 됨. React에서 JSX를 사용하면 더 쉽게 작성 가능
 