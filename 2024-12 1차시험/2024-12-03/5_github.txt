형상관리 시스템(Source Code Management)
 - 프로젝트의 시작부터 끝까지 모든 변동사항을 관리하는 작업

형상관리 꼭 필요한가?
 - 프로젝ㅌ의 진행을 위해서 -> 개발과정의 기록 및 사고 예방

 형상관리는 완벽한가?
  - 통제의 어려움
  - 무절제한 변경에 취약
  (사람마다 언제 무엇을 할지 모르기 때문에 중복되는 작업이 발생)
  - 버전관리는 편하긴함

형상관리 구성
1. 기준선
  - 각 형상 항목들의 기술적 통제 시점
  - 모든 변화를 통제하는 시점의 기준
1-1) 기준선의 종류
   - 기능적 기준선 : 수행계획서 (착수 보고서), 요구사항 정의서(관리 대장), 기능 구조도
   - 분배적 기준선 : 엔티티 정의서, 데이터 흐름도, 용어집
   - 설계 기준선 : 인터페이스 설계서, ERD 설계서, UI설계서(정의서), 유스케이스 설계서
   - 시험 기준선 : 단위테스트, 통합테스트 시나리오(단위테스트 관리대장, 소스코드 관리대장)
   - 제품 기준선 : 통합테스트 시나리오
   - 운영 기준선 : 사용자/운영자 메뉴얼, 최종 산출물(종료보고서)

프로젝트 수행단계

기획/분석 -> 설계 -> 구현 -> 테스트 -> 오픈

2. 형상 항목
- 프로젝트에서 공식적으로 정의되어 관리되는 모든 대상
3. 형상 버전관리
- 기준선을 설정한 후 일어난 변경의 고유 식별 번호
- 식별명과 버전으로 시스템 구성요소를 하나로 식별
4. 형상 제품
- 형상의 항목 대상이 되는 제품

형상관리 툴
 - git, svn, cvs

형상관리 버전관리
 - 일반적으로 형상관리 = 버전관리

형상관리(버전관리) 통한 기대효과
 - 백업, 복구 유용
 - 환경만 연결되어있으면 접근 용이
 - 버전관리를 통해 원하는 시점으로 돌아가는 것 이 가능

버전관리 종류
1. 로컬 버전 관리 시스템
2. 중앙집중식 버전관리 시스템
 - 사용자 관리와 서버 관리 용이
 - 중앙서버에 문제가 생기면 전체 오류
3. 분산 버전 관리 시스템(서버 여러개, 클라이언트도 여러개)

1. CVS
 - 중앙집중형
   중앙 저장소가 존재하고 그 중앙저장소에
   모든 사용자가 접근할 수 있도록 설계된 형상관리 시스템
 - 시스템이 굉장히 안정적
 - 이력관리 가능.
 - 단점 : 코드를 업로드시 오류 발생시 롤백 불가

2. SVN - (redmine)
 - 커밋이 엉킬일은 없음(다른사용자와 중첩 불가)
 - 변경사항 커밋 실패시 롤백기능 지원
 - 속도가 빠르고 개별 버전 관리 가능.
 - 안정성이 많이 떨어짐. 히스토리 관리가 쉽지 않음
 
3. GIT
 - 저장소 완본 자체를 로컬에 저장할 수 있음.
 - 처리속도 빠름 작업 이력 관리 용이
 - 커밋한 내용 수정 가능
 - 장소에 구애받지 않음 (인터넷 가능 + 권한이 있다면 접근 가능)
 git : 내부저장소 / github : 외부 저장소

형상관리가 진행되는 폴더 -> 작업트리

 스테이징 -> 커밋 -> 적용
 적용된 커밋을 되돌릴때
  revert, rollback
  revert -> 되돌아갈 버전으로 선택하여 버전을 원복하고 진행한 작업사항을 삭제함
  rollback -> 되돌아갈 버전을 선택하여 진행했던 작업내역을 남겨두고 선택했던 버전으로 되돌아감
  