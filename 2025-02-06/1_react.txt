리액트에서 어려운 부분.
데이터 넘기기

useState 가 해당 내용을 가지고 있음.

react/react1/src/basic/form.js 
작성했었던 내용이 토대

const [name, setName] = useState("");

let submitTest = (event) =>{
  event.preventDefault();
  alert('요청하는 값 ' + {name});
}
=> Object object 로 나옴
---------------------------------------
let submitTest = (event) =>{
  event.preventDefault();
  alert('요청하는 값 ' + name);
}

let submitTest = (event) =>{
  event.preventDefault();
  alert(`요청하는 값 ${name}`);
}

=> input에 입력한 원하는 값이 나옴
---------------------------------------

quiz2.js
style에 함수를 이용하여 요소 스타일 변경 가능

----------------------------------------

Hook 설명
hookExam.js

훅 . 라이프사이클별 설명이 많은관계로
훅 폴더 개별 생성

훅전용 인덱스 파일 생성. 이름 index.js
기존 인덱스.js 파일 이름을 index2.js로 변경


----------------------------------------
return : 컴포넌트가 사라질때 실행됨




버튼에서 
onClick={() => { 함수 호출 }}
형식으로 호출하는 이유

2. `<button onClick={dispatch('빼기')}>`:
이 방식은 문제가 있습니다.

두 번째 방식에 문제가 있는 이유는 다음과 같습니다:

1. 즉시 실행:
`dispatch('빼기')`는 컴포넌트가 렌더링될 때 즉시 실행됩니다. 이는 버튼을 클릭하지 않아도 '빼기' 액션이 발생한다는 의미입니다.
2. 반환 값:
`dispatch` 함수는 일반적으로 `undefined`를 반환합니다. 따라서 `onClick`에 `undefined`가 할당되어, 클릭 이벤트가 제대로 작동하지 않습니다.


익명 함수를 사용하는 이유:

1. 지연 실행:
`() => dispatch('빼기')`는 함수를 반환합니다. 이 함수는 버튼이 클릭될 때만 실행됩니다.
2. 매개변수 전달:
익명 함수를 사용하면 필요한 경우 추가 매개변수를 쉽게 전달할 수 있습니다.
3. 이벤트 객체 처리:
필요한 경우 이벤트 객체에 접근할 수 있습니다. 예: `(event) => { ... }`
4. 추가 로직:
클릭 이벤트 발생 시 dispatch 외에 다른 로직을 실행해야 할 경우 쉽게 추가할 수 있습니다.



Reducer 는 컴포넌트에 종속되지 않음
즉, 컴포넌트 외부에서 선언해서 사용 가능