# Jest 및 필수 패키지 설치
yarn add --dev jest @types/jest
yarn add --dev @testing-library/react @testing-library/jest-dom
yarn add --dev @babel/preset-env @babel/preset-react
yarn add --dev identity-obj-proxy
yarn add --dev @testing-library/jest-dom

yarn add --dev @testing-library/react @testing-library/jest-dom jest jest-environment-jsdom @babel/preset-env @babel/preset-react babel-jest

# Babel 관련 패키지
yarn add --dev babel-jest @babel/core

# React 테스팅 환경을 위한 패키지
yarn add --dev jest-environment-jsdom


Test 세팅 방법
1. 프로젝트의 폴더내의 package.json 파일수정
scripts 부분 아래의 내용으로 수정
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "eject": "react-scripts eject"
  },

2. 프로젝트의 폴더내의 package.json 파일과
동일한 레벨에 3개의 파일을 생성
.babelrc
babel.config.js
jest.config.js

각 폴더 내에는 아래의 내용을 적용
/* .babelrc */
{
  "presets": [
    "@babel/preset-env",
    ["@babel/preset-react", {"runtime": "automatic"}]
  ]
}
------------------------------------------
/* babel.config.js */
module.exports = {
  presets: [
    ['@babel/preset-env', {targets: {node: 'current'}}],
    '@babel/preset-react'
  ]
};
------------------------------------------
/* jest.config.js */
module.exports = {
  testEnvironment: 'jsdom',
  transform: {
    '^.+\\.(js|jsx)$': 'babel-jest',
  },
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js']
};
------------------------------------------


tdd 적용시
Button.js << 원본코드
Button.test.js << TDD용 파일

프로젝트 디렉토리에서 테스트파일은
테스트 디렉토리를 별도로 만드는것을 권장함
스프링처럼.


test 실행 방법
테스트파일 = 이름.test.js
파일명 = 이름
yarn test - 모든 테스트 파일 실행
yarn test 파일명,파일명,~ - 특정 파일의 테스트 파일만 실행

테스트 케잇르르 작성시에는 원본 코드가 필요하지 않음

컴포넌트를 테스트하고싶을때는 컴포넌트가 필요함

jest 라이브러리 함수
https://runebook.dev/ko/docs/jest/expect



Jest Matcher 
- 결과 확인을 위한 메서드(이게 맞냐를 물어보는 메서드)
- Matchr함수는 expect메서드를 통해 결과값을 확인함

toEqual() : 객체 검증 비교 (객체 값 동일 비교)
toBe() : 단순 값 비교
toMatch() : 정규표현식 기반 비교
toBeDefind() : 변수정의 여부 테스트
toBeTruthy() / toBeFalsy() : t/f 검증
- 검증 대상의 참 거짓을 판별
(js의 특성상 true/false가 모든값이 적용이 된다는 특징이 존재)
-검증대상의 정의를 정할 필요있음
- toBeTruthy는 검증대상이 규칙에 따라 true로 간주되면 테스트 통과
  toBeFalsy의 경우는 false로 간주될때만 테스트 통과
toBeCalled() / toHaveBeenCalled() : 같은역할
 함수의 호출 여부 확인
toHaveLength() / toContain() : 배열의 길이 체크 / 특정요소가 배열에 있는지 확인
toThrow() : 예외 발생 여부 테스트 ★★★★★
toHaveProperty() : 객체에 해당하는 key:value값이 있는지 확인
toBeCalledTimes() / toBeCalledWith() : 
함수가 몇번 호출됐는지 검증, 함수가 설정한 인자로 호출 되었는지 검증
------------------------------------
함수의 호출 횟수를 확인할때 문제점
jest는 함수를 직접 호출하게되면, 호출 횟수를 확인할 수 없음.
따라서 jest.Fn()이라는 임의 함수를 호출해서 사용해야하는데
실제 함수의 호출 횟수를 확인하기 위해서
매번 jest.Fn( () => {}) 식으로 확인하기 어려움.

그래서 함수의 횟수를 확인하기 위해서
jest.spyOn( ) 이라는것을 사용함

spy의 사용방법은 아래와 같음
1. spy는( jest.spyOn() ) 객체의 메서드에만 사용 가능
함수를 사용하면 인식하지 못함
2. export 한 외부파일에서 함수를 import로 가져와서 사용함
  ex) import * as testTarget from '경로'
   const spy = jset.spyOn(testTarget , "함수명");
------------------------------------
toReturn() / toHaveReturned()
- 해당 함수가 오류없이 리턴되는가를 판단
toReturnWith() / toHaveReturnedWith(value)
- 해당 함수가 지정한 값을 리턴하고있는지 확인

모킹 : 테스트하고자 하는 코드가 의존하는 함수나
      클래스등을 임시로 만들고 
      구동가능하도록 작업을 진행하는 개념
      - 테스트하고싶은 기능이 다른 기능과 
        엮여있다면 정확한 테스트가 힘든경우도 존재

테스트의 내용을 로그인 기능 구현 과정이라 가정
- 해당 프로세스를 알고있을 필요가 있음

로그인 진행과정
1. 사용자가 id와 비밀번호를 입력
2. 서버는 정보의 유효여부 판단
3. 맞다면 로그인 승인 아니라면 오류 리턴

로그인 진행과정을 테스트 하기위해 필요한것은? 
- id/pw를 입력받아 post로 해당 내용을 요청하면 
  정보 추출후 db에서 확인하는 테스트 필요

그렇다면 여기서 mock함수로 만들어서 처리해볼 내용은?
- 사용자 데이터를 조회할때 실제로 DB에 접근하지 않고 처리

Mock을 활용한 개발 요약
1. 테스트할 함수 안에 DB를 넣는 로직이 있다 가정
2. 우리가 테스트할 값 자체를 검증하려는건 아니라
   사용자가 입력할 데이터를 임의로 부여
3. db에 저장 혹은 접근하는 메서드는 mock으로 구현
4. 추후 리턴값을 DB에서 반환된 값을 직접 지정해주는 형식
5. 해당 리턴값을 통해 다른 부분들도 테스트


jest를 활용시 특히 개발자들이 많이 테스트 하는 부분
- 비동기
- 콜백, promise, async/await

jest 에서 콜백 테스트
- 비동기 메서드의 경우 이벤트 루프로 때문에
  처리가 뒤로 밀리기 때문에, 결과를 검증하기 위해
    - 콜백에 expect 메서드 활용 필요
비동기 방식을 테스트 하는 과정은 사실 복잡하지만 잘 익혀둔다면
중간 데이터의 흐름이나 상황등을 캐치하기 쉬워짐
