딥시크 이야기 나온 이유
 -> 2025 초반 면접 질문으로 나올 내용 예상
 
설계능력이 중요해지는 이유 : LLM들중에 설계까지 완벽하게 하는 경우는 없음

옵션 디스트럭쳐링
디스트럭쳐링 : 구조화된 배열이나 객체를 파괴하는것
객체를 저장할땐 key : value
- 그 후 사용시 객체명.key 형식이었으나
 변수를 사용하듯 key만 입력해도
 해당 객체의 값들을 가져올 수 있도록 처리
const obj1 = {name :'test' , age : 3};
const {name, age} = obj1;
console.log( name , age) === console.log(obj1.name, obj1.age);


스프레드 연산자

 스프레드 연산자의 기본 개념 (JavaScript)
✅ 배열에서 사용
js
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5, 6]; // [1, 2, 3, 4, 5, 6]

console.log(arr2);
📌 ...arr1 → arr1을 전개해서 [1, 2, 3]이 개별 요소로 들어감.

📌 기존 배열을 변경하지 않고 새로운 배열을 만들 때 유용함!
--------------------------------------------------------------
✅ 객체에서 사용
js
const obj1 = { name: "Alice", age: 25 };
const obj2 = { ...obj1, age: 30, city: "New York" };

console.log(obj2); // { name: "Alice", age: 30, city: "New York" }
📌 ...obj1 → 기존 객체를 복사함.

📌 age: 30 → 기존 속성을 덮어씀 (속성이 겹치면 마지막 것이 적용됨).

📌 새로운 속성 city: "New York"을 추가할 수도 있음.
--------------------------------------------------------------
2. 리액트에서의 스프레드 연산자 활용
리액트에서는 props 전달, 상태 업데이트 등에 많이 사용돼.

✅ 컴포넌트의 props 전달
jsx
const user = { name: "Alice", age: 25 };

function Profile(props) {
  return <p>{props.name} - {props.age} years old</p>;
}

// 스프레드 연산자로 props 전달
<Profile {...user} />
📌 {...user} → name과 age가 자동으로 전달됨 (<Profile name="Alice" age={25} />와 같음).
--------------------------------------------------------------
정리
✅ 배열, 객체를 펼쳐서 새로운 배열/객체를 만들 때 사용
✅ 리액트에서는 props 전달과 상태 업데이트에서 자주 활용
✅ 상태를 업데이트할 때 직접 수정하지 않고, 복사 후 변경하는 패턴이 필수적