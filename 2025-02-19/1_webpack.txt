webpack 은 필요한가?
- import를 하지 않으면 서로 다른 두 코드는 
  하나의 파일에 합쳐져야 진행할 수 있음
- 과거에는 충돌을 방지하기 위해 스코프 개념 활용
  (클로저 활용)
- 과거에 불편했던 상황을 극복하기 위해
  webpack같은 번들러는 현 개발 메타에서는 필수.

로더 : 웹팩의 특징 중 하나는 모든 파일을 모듈로 관리한다는 특징
(js, 이미지, 폰트, css도 전부 모듈화.)
- 웹팩은 JS 기반이기에 JS 만 이해할 수 있음.
- 비 JS 파일들을 웹팩이 이해할 수 있는 원리는 로더를 통해 가능.
- 로더의 예시중 하나가 babel

웹팩이 제공하는 기능 정리
1. 모듈 번들링 : 진입점에 연결된 파일을 단일화
2. 번들 최적화 : 더 작은 번들을 생성하면서 로딩 성능을 최적화
3. 코드 스플리팅 : 동적으로 필요한 모듈만 로딩하는 개념 
    -> 모듈을 청크(chunk) 라는 단위(큰덩어리)로 분리
4. 트리 쉐이킹 : 미사용중인 코드는 제거하여 크기와 성능을 잡는개념
5. 개발서버 실행 : 코드가 변경될떄마다 브라우저에 반영되는 개발용 서버를 실행할수 있음


웹팩 번들러를 위한 패키지 설치
(react, vue는 기본 적으로 세팅됨)
npm i -D webpack webpack-cli webpack-dev-server

node_modules 폴더에 존재하는 패키지
webpack : 번들러 핵심패키지
webpack-cli : 터미널에서 웹팩의 명령을 사용할수 있도록 제공되는 모듈
webpack-dev-server : 개발용 라이브서버(HMR)


웹팩로더 설정을 위한 패키지 설치
npm i -D style-loader css-loader sass-loader sass swc-loader @swc/core

style-loader : 로드된 스타일을 <style>로 <head> 영역에 삽입
css-loader : css 파일을 로드
sass-loader : sass/scss 파일을 로드
sass : 스타일 전처리기(컴파일러) / sass 문법을 해석
swc(Speedy web compiler) : 고성능 js/ts 트랜스 파일러
- 바벨과 동일한 역할, 바벨보다 빠름
swc-loader : js/jsx 파일로드
@swc/core : jsx파일 해석


4.플러그인 설정
번들링된 결과물을 처리하는 역할 설정
로더가 파일단위로 처리해 결과를 만드는것과 다르게
플러그인은 번들된 결과를 처리

npm i -D html-webpack-plugin copy-webpack-plugin
html-webpack-plugin : 최초 실행될 html 파일을 연결
copy-webpack-plugin : 정적 파일을 제품 폴더로 복사


webpack 파트에서 알고가야하는것
1. 프로젝트 세팅 자체를 직접 다뤄봄으로써
추후 세팅 변경시 거부감 최소화
2. create-react-app 같은 간단한 명령어 없이 
직접 세팅해 봄으로써 webpack과 babel의 역할 확인

webpack이외의 번들러
1. Parcel : 별도 구성 파일없이 간단하게 사용하는 번들러
- webpack의 경우 이것저것 할게 많은데
  parcel은 필요한 기능들을 자동으로 설치하고 처리해줌
- 대규모 프로젝트에서 webpack을 자주 사용함
 (규모가 커질수록 구조가 복잡 - webpack은 상세한 구성을 컨트롤 가능
  parcel이 편하지만 대규모 프로젝트에는 webpack이 적합)


npm install html-webpack-plugin
.swcrc 파일 생성 후 아래으 내용 입력
{
  "jsc": {
    "parser": {
      "syntax": "ecmascript",
      "jsx": true
    },
    "transform": {
      "react": {
        "runtime": "automatic"
      }
    }
  }
}


package.json 에 내용 추가
"scripts": {
    "dev": "webpack serve --mode development --open",
    "build": "webpack --mode production"
  },

webpack.config.js - 파일 생성
webpack.config.js 파일을 통해 프로젝트의 구성을 설정할 수 있음
기본적인 옵션들로
진입점, 출력, 로더, 플러그인이 존재

webpack.config.js 에 아래의 내용 작성
module.exports = {
  entry: '', // 진입점
  { //진입점을 여러개로 처리 하는 방법 (객체로 지정)
    main : './src/main.js',
    sub : './src/sub.js',
    entrypointtest : './src/entrypointtest.js'
  },
  output: {}, // 출력
  module: { // 로더(모듈)
    rules: []
  },
  plugins: [], // 플러그인
  // 기타 옵션...
}

1. 진입점 : webpack 이 프로젝트를 해석하기 시작하는 위치

2. 출력 : webpack이 생성하는 번들 파일의 이름과 경로를 설정하는 옵션
- __dirname : CommonJS가 제공하는 전역변수, 현재경로를 리턴

3. 로더

4. 플러그인



빌드 도구
- 번들러 자체는 자원(코드나 파일)들을 모아서 하나의 최적합 파일로 결합
- 빌드 도구는 프로젝트 빌드 과정의 전체적인 흐름을 관리해주는 도구
  (번들러를 기본적으로 포함해주고 개발서버, 링팅, 테스트 등의
  추가로 개발에 필요한 여러가지 도구들을 가지고 있는 것)
- vite를 예시로 시작

vite 기반의 react 세팅
- 프로젝트 크기와 상관없이 최적의 속도를 유지하도록 노력하는 개발서버의 제공
- webpack에서 jsx나 scss등의 설정을 하지 않아도 사용 가능
- 개발/운영간 빌드 차이가 거의 없음
  (운영에 빌드할 할때에는 번들링이 필요)

vite 와 native ESM
- 브라우저나 node 환경에서 별도의 번들링 과정없이 esm을 지원하는것
- esm = js 공식 모듈 시스템
- vite 는 native Esm 지원 여부를 기준으로 
  지원하면 모던 chunk, 미지원하면 레거시 chunk 를 사용하도록 분기


vite 설치
npm create vite@latest .

실행시 
npm run dev

운영환경 실행 npm run