

recoil 핵심사항
1. atom, selector 사용방법만 알고
2. 그것들을 기반으로 비동기 처리방법 확인
3. 상태 분기 처리 테스트
4. nextjs와 연동 해보고
5. 여기까지 알면 recoil은 그냥 무한 응용

recoil 관련 속성과 메서드, hook정리
1. 가장 중요한것은 recoil을 쓸거면 최상단 컴포넌트에
<RecoilRoot></RecoilRoot> 적용 잊지말것

recoil 상태 정의 메서드
1. atom : redux의 스토어 역할
- 컴포넌트가 구독할 수 있는 상태의 기본 단위
필수 속성 : key(식별자), default(초기값)
2. selector : atom 을 기반으로 파생된 상태생성
key : 식별자
get : 상태를 읽어오는 함수 ({get} 파라미터를 통해 다른 아톰 / 셀렉터에 접근)
set : 상태 변경함수 (꼭 쓸 필요 없음)
3. atomFamily : 동적 상태 생성
- 파라미터를 받아 동적인 atom을 리턴하는ㄴ 공장함수
- 외부 파라미터를 활용한 상태관리에 유용
- 비슷한 기능을 하는 별개의 atom이 필요한경우
  하나의 형태를 선언해놓고 별개의 atom이 필요한 경우
  사용한수 있는 기능이라 설명

4. selectorFamily : 
- atomFamily와 거의 동일

외부 파라미터에 의존해야하는가 => atomFamily
독립적인 상태 관리가 필요 => atom
컴포넌트의 생성 삭제가 빈번하다 => atom
비동기 로딩에서는 => atomFamily
atomFamily는 세션과 캐시 관리에도 편함


hooks
useRecoilState() : useState와 유사한 형태로 사용
- 파라미터를 atom이나 selector 자체를 받아온 후 리렌더링에 활용
useRecoilValue() : 상태 값만 필요할때 사용
useSetRecoilState() : 상태 변경 함수만 리턴 -> 상태 값 없이 변경함수만 필요할때 사용
(useState의 set~ 메서드만 선언하고싶을때)
useResetRecoilState() : 상태를 초기값으로 리셋할때 사용
