/**
배열 <-- 하나의 타입으로 통일, 서로 연속적으로 인접해있음.
  -> 배열을 밀집배열이라고도 부름
  -> 배열은 요소의 삽입 삭제 처리시 작업량이 많아지는 단점이 있음
  다른 언어에서 대응 방법
  (자바 : collection framework)
 기본적으로 인덱스 값을 통해 효율적으로 요소에 접근 가능
  -> 순서대로 배치되어있어 찾기 편함 => ?

 JS의 배열은 밀집배열이 아님 (희소 배열 형태 : 나중에는 쓸 수 없을 수 도있음)
  -> 배열을 흉내내는 객체
  -> JS의 배열은 모든 요소가 동일한 타입이 아닐 수 도, 연속적으로 이어져있지 않을수도있음


차이
JS 배열의 특징 (vs 일반 배열)
  - 검색은 비효율적이며 느림 /  순환검색
  - 특정요소만 검색하거나 삽입 삭제는 일반적 배열보다 빠름

  spread 문법. 배열/이터러블화
   -> 순환에 최적화된 객체로 변경
console.log([...arr]);

  결론 : JS의 배열은 배열이 아니라 배열을 흉내내는 특수한 객체
   -> 상황에 따라 유사배열을 쓸지 spread 문법을 적용할지 잘 구분할것
   구분의 기준
   1. 재빠르게 순환을 원하면(순서가 있는 경우) spread를 => 아마도 탐색?
   2. 데이터 삽입이나 삭제가 자주 일어나는 빈번한 구조일경우 일반 배열 사용

  배열의 값이 자주 변경되는지 않는지 고민이 필요함
   -> 코딩테스트의 당락이 결정됨
 */


let arr = [1,2,3,4,5];