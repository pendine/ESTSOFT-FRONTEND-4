React review
- 리액트를 사용하는이유

재사용성, 다른 라이브러리(프레임워크)보다 성능상 좋음
- react가 유연해서

생태계 구성이 좋음
- 자료찾기가 좋음

react 원칙
1. 선언적 프로그래밍 
  구성과 업데이트가 아닌 어덯게 보여져야하는지를 
  설명하는 코드를 작성하도록 유도
  어플리케이션의 상태와 동작을 이해하기 쉽게 만들어서
  디버깅, 유지보수 간소화
2. 컴포넌트 기반 구조
  모듈화 재사용성 고려
3. 단방향 데이터 흐름
  상태관리의 단순화

npm : node package manager
- node 관련 모든 패키지 관리
- npm 느림, 성능 및 속도 안정성을 강화한 패키지 매니지가 yarn

yarn 전역설치 명령어
npm install -g yarn

yarn을 활용하여 react설치
- 프로젝트 폴더를 세팅할 디렉토리로 이동
yarn global add create-react-app
- 프로젝트 생성 (폴더생성)
create-react-app 프로젝트 이름

???
npm install --save react@^18.0.0 react-dom@18.0.0
npm install @testing-library/react@13.4.0

yarn 실행
yarn start


react, 구성요소 기반 아키텍처
1. React로 개발자들이 해야하는것
 - UI를 독립적, 재사용 가능토록 구성하는것을 유도

구성 요소 기반 접근 방식의 장점
 - 모듈성, 재사용성, 캡슐화

react 주요도구
1. virtual DOM : 직접적인 DOM 조작을 최소화하기위해 나온 개념
  - 대량의 데이터를 처리할때도 UI가 반응적인 상태를 유지할수 있음(SPA)
  - RealDOM의 인메모리 표현
  - 업데이트 진행 후 RealDOM에 최소한의 변경사항만 적용
2. JSX
3. 상태 관리 : 사용자의 입력처리, 데이터 로딩, 
  시스템(어플리케이션)의 상태변경에 따른 사용자 인터페이스 업데이트를 
  더 쉽게 처리하도록 지원
4. 라이프사이클 : 구성요소의 생성부터 소멸까지 다양한 단계를 제어
5. 다양한 개발자 도구

