zustands의 미들웨어
- 상태관리 로직의 확장, 보강
- zustand의 미들웨어는 스토어 생성시점에
  미들웨어를 하나로 통합하여 동작시키는 원리
- 요약하자면 미들웨어의 즉각적용을 통해 
  별도의 체인같은 것이 필요 없음

미들웨어가 필요한 이유
- 비동기 로직처리(필수 X)
- 로깅과 디버깅
- 상태지속성(Persistence)
- 복잡한 상태 흐름에서 
디버깅이나 외부 저장소와의 동기화,
많은 비동기 작업시에는 미들웨어의 활용이 필수.

redux 미들웨어와 zustand 미들웨어의 비교
1. 구조적인 차이가 있음
- redux는 액션의 디스패치후 처리가 됨
(zustand는 스토어 생성 시점에 적용 가능)
2. 비동기 처리 방식이 다름
- redux 는 thunk가 필요 (zustand는 기본적으로 지원)
3. 상태 지속
- redux는 redux-persist를 사용
- zustand는 persist라는 메서드를 통해 지원

Redux : 설정이 복잡하고 난해. 확장성 좋음
- middleware 체인 내부에서 동작

zustand : 스토어 생성시점에 필요한 기능 통합
