디자인(설계)단계에서 프로그래밍 목적을 정의
- 무엇을 테스트 할지를 미리 정의하는것은 TDD방식에서 일반적으로 진행
(테스트 코드를 작성하는 도중 발생하는 예외상황 존재
이러한 예외상황들 또한 테스트 케이스에 추가 후 개선, 
설계를 완벽하게 할 수는 없음.
따라서 구현을 빨리 끝내고 테스트를 통해 수정 및 보완 진행)
- 테스트가 통과된 코드만을 코드 개발 단계에서 실제 코드로 작성.
(구현 기간동안 테스트 진행 => 구현기간 = 테스트기간)
- TDD는 '이론상'으로 테스트와 구현이 반복적으로 진행되며 
자연스럽게 코드의 버그가 줄어들고, 소스코드는 간결해지는 특징이 있음
- 테스트 케이스를 작성하며 설계부분도 개산되니, 재설계 시간도 절감


TDD의 장점
1. 디버깅 시간 단축
2. 빠른 피드백
- 인수테스트라는게 있음. TDD로 개발했을때 
실질적으로 완성된 코드로 테스트를 하기 때문에
프로그래머의 손을 떠나기전에 피드백을 받는것이 가능
- TDD는 문제 발견이 좀 더 편함
3. 불안정성이 개선되다보니 생산성이 높아짐
- 다만 TDD는 지루할 수는 있음
(앞선 장점들을 생각하면 불안정성이 개선되니, 
생산성의 증대하는 효과 기대)
4. 재설계 시간의 단축
5. 추가 구현 용이

TDD의 단점
1. 생산성 저하
- 테스트 케이스를 작성하며 생산성 저하
- TDD가 일반적인 방식보다 시간이 30%정도 증가
- 최근 MVP방식의 개발이 유행
2. TDD는 익숙히지 않다면 개발 패턴의 변경 필요
- TDD에 익숙하지 않은 개발자들이 
  프로젝트에 투입되어 TDD로 하면 생산성 저하
3. 예외상황에 대처가 어려울 수 있음
- 코드의 유연성 낮음
- 현실적인 상황의 어려움으로 인해 TDD 원칙 준수의 어려움


TDD를 제외한 기본적인 테스트의 종류
1. 단위 테스트 (unit test)
2. 통합 테스트 (integration test)
3. 기능 테스트 (function test)
- 소프트웨어의 특정한 기능이나 동작을 테스트하는 개념
- 유효성검사가 올바르게 동작하는지, 적절한 경로로 데이터가 잘 전송되는지 테스트
- 통합테스트 일수도, 단일테스트 일수도 있음
- 주요 목적은 코드의 적합성보다 동작 그 자체를 테스트하는것에 목적이 있음
- 프로그램에 특정값이나 이벤트르 주고 그에 해당하는 출력을 조사하여
  원하는 결과값이 나왔는지 테스트
4. E2E Test (end to end test)
- 사용자 입장에서 테스트
- 클라이언트들과 통합테스트시 진행되는 패턴중 하나

테스트를 적용할 부분
unit 테스트와 functional test 비교
1. unit 테스트 장단점
장점
- 실패원인이 가장 잘보임
- 시간소요가 짧은편
- 이론상 테스트간의 결합도가 낮아 편리
단점
- 상호과정중 실패하더라도 테스트상으로는 통과일 가능성 존재
ex) 유효성 검사 실하더라도 데이터가 저장될 수 있음
- 코드 재구성시 기존에 잘 되던 코드가 다시 안되는 경우도 존재

functional test 의 장단점
장점
1. 기능자체의 테스트라 직접적으로 사용자가 사용하는 기능에 접근을 하니
잘 수행되면 테스트 자체는 견고하다고 할 수 있음.
2. 리펙토링시에도 동작만 유지되면 테스트 통과의 가능성이 높음

단점
1. 결합도가 높은 상태
- 실패시 에러 찾기 어려움 (흐름을 쫒아가며 찾아야함)
2. 

BDD (행동 주도 개발 / Behavior Driven Development)
- TDD가 코드중심이라면 BDD는 사용자 중심
- 사용자가 행할 수 있는 잘못들까지 고려하여
  테스트를 진행하고 개발하는 프로세스
- 시나리오가 중심 개발이라고도 말할 수 있음
- 시나리오의 기준은 Given Whan then 구조로 진행
(given : 시나리오 진행에 필요한 상황 명시
when : 시나리오를 진행하느데 필요한 조건
then : 시나리오를 완료할경우 보장해야하는 결과를 명시)

퀴즈
버튼 2개 생성 (+,-)
값 을 출력하는 영역도 정의
+을 눌렀을때 최대 증가값 100
-을 눌렀을때 최소 감소값 1
