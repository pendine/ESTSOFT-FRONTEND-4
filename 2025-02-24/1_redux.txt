강사님의 Middleware 의견
미들웨어는 상태관리를 위한 메서드 정도로 생각하면 편함


Redux : 상태관리 라이브러리
1. 왜 써야하는가
- 컴포넌트간 데이터 흐름이 복잡해서 나온 개념
- Context API와 비교하자면 다중 값 관리, 성능 최적화 측면에서
Context API의 한계점이 명확 (중첩 컴포넌트가 계속 발생하는 증상)
- 컴포넌트가 10개가 정첩됬다 가정하고 context값을 변경하게 된다면
불필요한 리렌더링이 증가함 (10개 컴포넌트중 7~8개가 불필요한 리렌더링 진행)
- Flux 아키텍처의 등장
  (단방향 데이터 흐름을 강제하여 상태 변경의 예측 가능성을 높인 패턴)
  이 패턴은 Action -> dispatcher -> store -> view의 순환 구조를 가져감
  - 이 패턴을 단순화 한 구현체가 Redux
- Flux 아티텍처의 핵심원칙은 상태변경을 엄격한 프로토콜하에 제한함으로써
  디버깅 가능성을 극대화하는것이 목적

Redux와 Hooks
- react 버전이 개선될 수록 함수형 컴포넌트와 hook이 보편화 되기 시작
- 상태 관리 접근 방식이 변화됨
  - 신기능이 나올수록 기존 상태관리 솔루션과 호환성 문제가 생기기 시작
  - 호환성문제로 나온것이 Recoil

Flux 아키텍처
Action -> dispatcher -> store -> view -> ui -> Action

Redux 3대 원칙
1. Single Source of Truth
2. State is Read-Only
3. Changes with Pure Functions


미들웨어의 동작시기
미들웨어의 동작시기는 액션이 dispatch된 후
reducer가 처리하기전 추가적인 작업을 수행하도록 도움을 줌
 ex) 비동기 처리가 필요하거나 작업의 로그가 필요할때


createSlice
useSelector = redux의 상태관리

createSlice : redux의 상태와 관련된 로직을
       한곳에서 정의하도록 도움을 주는 함수