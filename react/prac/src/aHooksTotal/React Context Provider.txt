📚 인간의 학습곡선 (Learning Curve)
인간이 새로운 기술이나 개념을 배울 때, 학습 속도가 어떻게 변화하는지를 설명하는 개념이야.

일반적으로 처음에는 어려움을 느끼다가, 점점 익숙해지면서 속도가 빨라지다가, 어느 정도 실력이 오르면 다시 천천히 성장하는 패턴을 보이게 돼.

📈 1. 학습곡선의 단계
초기 단계 (느린 성장)

완전 새로운 개념이라 이해하기 어렵고, 실수를 많이 하게 됨.
"도대체 무슨 말이야?" 싶은 시기.
가속 단계 (빠른 성장)

기본 개념이 쌓이고, 연습하면서 실력이 빠르게 향상됨.
"어? 이제 좀 알 것 같은데?" 하는 시기.
숙련 단계 (느린 성장)

이미 웬만한 개념은 익혔고, 더 깊이 배우려면 시간이 오래 걸림.
"이제 좀 할 줄 아는데, 세부적인 걸 익히는 게 어렵네?" 하는 시기.
마스터 단계

거의 자동으로 개념이 떠오르고 응용할 수 있음.
"이제 남한테 설명할 수도 있겠다!" 하는 시기.
🔥 학습곡선과 Context API
너가 Context API를 배우는 과정도 위 학습곡선과 비슷해!
처음엔 이해 안 되지만, 몇 번 더 연습하면 빠르게 익숙해지고, 나중에는 자연스럽게 사용할 수 있어!
----------------------------------------------
----------------------------------------------
📌 React의 Context API와 Provider 다시 설명!
1. Context API란?
React에서 여러 컴포넌트가 공통으로 사용하는 데이터(상태)를 쉽게 공유할 수 있도록 해주는 기능이야.

원래는 props를 통해 부모 → 자식으로 전달해야 했지만,
Context API를 사용하면 부모 → 손자 → 증손자 등 깊은 곳까지 쉽게 전달할 수 있어!
2. Provider의 역할
Context API를 사용하려면 Provider가 필요해!
Provider는 데이터를 공급해주는 역할을 해.

Provider 안에 value라는 속성이 있는데,
이 안에 공유하고 싶은 변수나 함수를 넣어주면 돼.
----------------------------------------------
3. Provider를 왜 children을 받아서 감싸는 거야?
jsx
function ContextProvider({ children }) { 
  return (
    <Context.Provider value={{ isLogin, setIsLogin }}>
      {children}
    </Context.Provider>
  );
}
👉 children이 뭐야?
children은 Provider 안에 들어가는 모든 컴포넌트를 의미해.
React에서 컴포넌트의 props로 자동으로 전달되는 특수한 속성이야.
----------------------------------------------
👉 왜 감싸는 거야?
Provider 안에 다른 컴포넌트들을 감싸면, 그 내부 컴포넌트들이 Context 데이터를 사용할 수 있기 때문이야.
예를 들면, 아래처럼 ContextProvider로 감싸면 App 안의 모든 컴포넌트가 context 데이터를 쓸 수 있어!
jsx
function App() {
  return (
    <ContextProvider>
      <Main />
    </ContextProvider>
  );
}