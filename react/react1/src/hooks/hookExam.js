/*
정확한 명칭은 Hooks
16버전에 출시
함수형 컴포넌트가 상태관리가 너무 어려움
함수형 컴포넌트에서도 상태관리를 할 수 있도록 다양한 메서드듣을 추가
그 중 하나가 useState

useState : 상태 관리 hook
 - 함수 파라미터 기본값 설정
 - 그 외 컴포넌트의 전반적인 상태를 관리하는 hook

useState의 사용방식
  const [현재상태값, 해당값을 업데이트하는 함수명] = useState(초기상태값)


useEffect : 컴포넌트 렌더링시 
            특정 작업을 수행하도록 설정하는 hook
            사용하는 hook, state와 다르게 필수는 아님
            필요할때만 사용
useContext : useState가 컴포넌트 단위의 지역변수 느낌이라면
  전역변수 느낌임.
  상태 자체를 전역으로 관리하는 방법
  (컴포넌트간 값 공유)
useRef : 참조 훅
- .current 프로퍼티로 전달된 인자로 
초기화된 변경가능한 ref 객체를 반환하며
반횐된 객체는 컴포넌트의 라이프사이클을 통해 관리
- 렌더링이 필요하지 않을 값을 참조할 수 있는 훅
  - 컴포넌트가 특정 정보를 기억하도록 하고싶지만
    만약 새 렌더링을 막고싶다면 ref를 사용
  react 포스트잇이라고 생각 = 기억하고싶은 내용을 
                           저장할때 쓰는 state와 다른 변수 선언
가상 DOM이 아닌 DOM을 직접 조작함 (<- 핵심적인 내용)

useReducer : 컴포넌트에 reducer를 추가하는 react hook
 - state와 비슷하지만 복잡한 상태 관리시 사용하는 hook
 - state의 대체함수
 - state의 경우는 컴포넌트 자체를 전체 통제하는 특징
 - reducer는 업데이트의 로직 자체가 분리되어있어서
   컴포넌트의 영향에서 벗어날수있음
 - 컴포넌트 외부에 state를 업데이트 할 수 있는 코드를 적는다

reducer vs state
state : 관리해야하는 상태가 1개일때, 값이 단순할때

reducer : 관리해야하는 state가 1개 이상일때,
          값이 복잡하고 프로젝트 규모가 클때,
          값이 유동적일때
useReducer에서 사용 가능한 구성요소(함수)
1. useReducer : state 갱신 역할
      - state : 컴포넌트에서 사용할 상태값
      - dispatch : state를 업데이트할 함수
      - reducer : 컴포넌트 외부에서 state를 업데이트 하는
                  로직을 담당하는 함수
      - initialState : 초기 state
      - init : 초기 함수
2. action : 업데이트를 위한 정보를 가지고 있는 
            dispatch의 인자값(파라미터값)
3. dispatch : reducer 함수 실행기라고 봐도 무방
4. reducer : 컴포넌트 외부에서 상태를 업데이트 할 때 사용하는 함수

useMemo : 
useCallback : 
useLayoutEffect : 
Hook 커스텀 : 




const [count, setCount] = useState(1);
  -> count라는 변수를 제어할때 setCount라는 메서드를 사용함.
  기본값은 useState(1) 이라는 메서드를 활용하여 
  count의 값을 1로 초기화


hook은 일반 함수와 거의 비슷함

hook의 장점
1. 코드가 간결해짐
 - 함수형 컴포넌트가 클래스형 컴포너트를
 단순히 사용하기 위해 나온 개념이지만,
 기능을 다 만들 수 없어서 hook이 등장
2. 재사용성
 - 혹은 커스텀 가능
3. 컴포넌트 분리
4. 라이프사이클 메서드 문제 해결

라이프사이클(컴포넌트의 생명주기)
컴포넌트가 생성되고 업데이트, 소멸될때까지의 
상태를 설정(제어)하는 메서드

라이프사이클을 제대로 사용하기위해서는 
클래스컴포넌트 형태를 사용하는것이 권장됨

라이프사이클 = 강의해서 훅을 이해하기 위한 빌드업

마운트 , 업데이트, 언마운트

Hooks의 등장으로 클래스형 컴포넌트를 굳이 강요받지 않음

Hooks의 규칙 : 최상위 레벨에서만 호출 할 것 
(필드로 선언하라는거임. 최상위 레벨에서 호출하라고 하니 헷갈리네)
(리액트의 함후형 컴포넌트의 구조 자체가 
Hooks의 호출 순서에 의존하여 
해당 hooks이 관리하는 상태와의 연관성 유지 때문에)
*/