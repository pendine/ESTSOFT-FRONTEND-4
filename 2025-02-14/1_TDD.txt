TDD : Test Driven Development

1. 처음 들어보고 써보면 드는 느낌 : 왜..... 쓰.... 지?

tdd는 테스트 주도 개발 이라는 이론
 -> 반복적인 테스트를 이용한 소프트웨어 방법론
 -> 작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를
    반복하면서 구현하는 방식.
 -> XP 기반의 단순 설계를 중요시 하는 이론
    (xp : 미래에 대한 예측은 지양하면서 지속적으로 코드를 완성해나가는 방법론)
     -> 추가 요구사항에 대해 실시간 반영이 가능.
 -> TDD의 문제는 개발자들마다 생각과 의견이 다 다름.
    (실무에서 TDD를 꼭 적용해야함? -> 현 프로젝트 상황과 거리가 멀 수도 있음.)
      - 가장 중요한점은 회사마다 일하는 방식이 다르고 업무환경 편차는 존재하기 마련.

TDD 절차
 -> RED, GREEN, REFACTOR
 RED : 일부러 실패하는 테스트코드를 작성.
 GREEN : 테스트 코드를 성공시키기 위한 실제 코드 작성.
 REFACTOR(BLUE) : 중복코드 제거(클린코드작성) / 리팩토링

실패하는 테스트코드를 작성할때까지 실제 코드를 작성하지 않는것과
실패하는 테스트를 통과할 정도의 최소한의 실제 코드를 작성해야하는것.(TDD에서 중요하게 생각하는 부분)
 -> 사용자가 무엇을 할지 모르기때문에 사용자가 실수로 잘못할 부분까지 예측해보는것.

TDD의 흐름

단위테스트 시나리오 작성 -> 실패 -> 다시 작업 -> 성공할때까지.. 설령 다 해도 오픈날까지 계속...

1. 단위 테스트 - 하나의 모듈(컴포넌트)을 기준으로 독립적으로 진행되는 최소단위 테스트.
2. 통합 테스트 - 전체적인 흐름 자체를 테스트 해보는 것.

일반 개발 vs TDD

case 일반개발
1. 요구사항 분석 
2. 요구사항을 분석한 내용을 기반으로 설계
3. 설계된 내용을 기반으로 개발(구현)
4. 개발된 내용들을 테스트
5. 오픈일에 맞춰 배포.

일반개발방식의 특징
 - 초기에 완벽한 설계를 하는것은 너무나 어려움
    -> 잠재적 에러나 추가 요구사항으로 인한 재설계를 진행.
    -> 재설계 진행시 개발자는 코드를 추가or 수정하는 경우가 발생
       (불필요한 코드를 추가할수도 있음)
    -> 불필요한 코드가 추가되면 -> 재사용성 하락. -> 관리가 어려워짐 -> 유지보수가 빡세짐.
    -> 사소한 코드 수정에도 어디가 잘못된지 알기 어렵기때문에 전체적인 테스트가 진행되야함.
       
TDD 개발방식 특징
 - 테스트 코드들을 사전에 미리 작성을 해둠. -> 그것을 기반으로 실제 개발 코드를 작성
 - 목적과 범위가 미리 설정이 되어야함.
 - 테스트 코드 작성시 발생된 예외적인 상황들은 테스트 케이스에 추가하여 설계를 개선
 - 테스트에 통과된 코드들만 실제로 사용하다보니 에러가 줄어든다라는 이론상의 장점이 있음.

TDD를 적용한 사례
 - 생년월일을 입력받으면 현재 나이를 출력하는 프로그램을 작성해주세요.
 - 1989 -> 35
 - 2000 -> 25, 24
 - 1997 -> 28, 27

1. 처음에는 간단한 것으로 목표를 정해야함.(일단 만들고 보자)
    -> 2000이라고 입력되면 24 or 25라고 나오도록 처리해보자.
       (오늘날짜의 년도를 추출하여 년도 - 입력값의 결과를 리턴하자.)
2. 만들기전에 만든 후 무엇을 테스트 할지를 설계(실패하는 경우)
    -> 1997을 입력했는데 24가 나오는 테스트 프로그램
3. 테스트를 통과할 프로그램을 만들으면됨(1번을 목표로 작성한 코드)
4. 테스트 프로그램으로 3번에 해당하는 코드를 실행.
5. 통과하면 다음거.(새로운 테스트)
    - 여기서 생일이 지났는지 아닌지를 판단하여 계산하도록 내용을 추가.
6. 모든것이 다 끝날때까지 지속적으로.






