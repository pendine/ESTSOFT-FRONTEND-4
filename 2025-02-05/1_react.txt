가상 DOM
- JS에서 HTML의 태그들을 이용할때 활용하는 문서 모델
- 가상DOM은 DOM의 요약본이라 할 수 있음
- 가상DOM이 DOM보다 무조건적으로 빠르지는 않음

가상DOM VS DOM
- SPA vs MPA (DOM은 MPA를 염두에 두고 설계된 구조)

SPA도 완벽한건 아님. 다만 현 웹개발 트렌드에 가장 어울려서 사용됨
- SPA는 DOM 조작을 굉장히 빈번히 발생시켜 성능상 불리한 순간도 많음
- 프로젝트에 맞게 SPA, MPA 방식 중 선택하여 진행

리액트 컴포넌트
컴포넌트 : 독립적이고 재사용가능한 코드들의 조각
- 초창기 : 리액트에서 컴포넌트를 만들때 무조건 클래스 기반
- 15버전 : 컴포넌트를 함수형으로 구성 가능


클래스 기반 컴포넌트
(추후 패치에서 제거될 가능성 있음)
- state 객체 : 구성 요소에 
              속하는 속성값을 
              저장하는 장소

setState : 객체 상태 변경
useState : ????


조건부 렌더링
1. if문 활용
2. 논리 연산자 && 를 활용하여 처리 가능
ex) {count === 10 && <p>최대클릭 수에 도달</p>}
(변수 count 가 10일경우, 논리연산자 && 옆의 태그 호출)
3. 삼항연산자


react list
map : 배열의 각 요소를 순회하여 콜백 함수를 적용한 결과를 모아서
      새로운 배열을 리턴하는 함수
key : react가 해당요소를 쉽게 추적할 수 있도록 제공된 속성
- 유일성 (고유한 값만, 중복된 값은 안됨)
- 항목을 업데이트하거나 제거했을시 전체 목록 렌더링이 아닌
  해당 항목만 다시 렌더링 되는 이점이 있음


react와 style sheet
기존에는 inline, 내부, 외부 스타일시트를 활용하여 처리

react에서는 inline과(jsx문법을 맞춰서 작성했다는 전제) 외부는 동일
인라인 스타일 속성 적용시 중괄호 두개 
      <h1 style={{color:"red"}}>Red</h1>

모듈 방식, js객체 방식은 react에서 활용하는 방법

리액트에서 스타일 적용시 DOM 속성을 사용하기 때문에
카멜케이스 적용 필요
const freeStyle = {
    color : "white",
    backgroundColor : 
  }

css 모듈 방식
- 별도 컴포넌트(파일)에 배치된 곳에 CSS를 적용하는 방법 
(Vue 의 Scoped 속성과 비슷함)
- 해당 파일을 벗어나지 않아 네이밍 충돌을 걱정하지 않아도됨
- 확장자가 .module.css <-- 확장자가 이런 형식으로 길다는 특징
- scss 파일을 그대로 입력할 수 잇음.
npm i sass : 패키지 설치 필요