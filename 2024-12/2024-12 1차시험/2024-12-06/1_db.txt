CREATE database psj; -- DB생성 명령어
 - DCL

use test; -- 해당 DB로 접근하는 명령어
(use DB_name 을 사용해야 해당 DB를 사용한다는것을 명시
이 쿼리를 사용하지 않으면
오류발생함 : SQL Error [1046] [3D000]: (conn=225) No database selected
)
 
mariaDB 주석방법
 "-- " or "#"
 따옴표 안의 내용이 주석처리 방법
 공백 필요.

# 테이블 생성 방법
# CREATE TABLE table_name(
# 	column_name DATA_TYPE constraint_1 constraint_2,
#   column_name DATA_TYPE constraint_1 constraint_2,
#   column_name DATA_TYPE constraint_1 constraint_2
# );

데이터 타입
- 정수타입
- 실수타입
- 문자타입
- 시간타입
- 기타... : 파일 관련타입, enum 

# 테이블 생성시 사용하는 데이터 타입
# 정수형
# TINYINT : -128 ~ 127까지 255가지 수 표현 가능
# SMALLINT : -32768 ~ 32767 까지 65536가지 수 표현 가능
# MEDIUMINT : -8388608 ~ 8388607 까지 16777215가지 수 표현가능
# INT : -2147483648 ~ 2147483647 까지 4294967295가지 수 표현가능.
# BIGINT : 무제한 표현 가능

# 실수형
# FLOAT : 4BYTE
# DOUBLE : 8BYTE
# DECIMAL : 고정 소수형 데이터 타입 고정.

# 문자형
# CHAR(10) 고정 길이 데이터 타입 길이 / 255
#  - 'HELL' / 10BYTE -'GWAKGWAKDA' <-- 10BYTE
# VARCHAR(N) 가변 길이 데이터 타입(길이 / 65535)
#  - 쓴만큼만 부여
# TINYTEXT(N) 255(문자열데이터)
# TEXT(N) 65535(문자열데이터)
# MEDIUMTEXT 16777215
# LONGTEXT   42억이상.

# 시간형
# DATE : 날짜표현(YYYY-MM-DD)
# DATETIME : 날짜표현+ 시분초 표현(YYYY-MM-DD HH:MM:SS)
#  - '1001-01-01 00:00:00' 부터 '9999-12-31 23:59:59'
# TIME : 시간표현(Hh:MM:SS)
# TIMESTAMP : 1970-01-01 00:00:00 이후부터 시스템 현재 지난 시간까지를
#             초단위로 환산하여 숫자로 표현.
# YEAR(N) 2, 4 :  2 (70 ~ 69) 4 (1970 ~ 2069)

# 특별한 타입들
# BLOB
# binary Large Object : 이미지처럼 크기가 큰 데이터를 저장할때
#  						 사용하는 타입
# TINYBLOB : 255BYTE
# BLOB : 64KB
# MEDIUMBLOB : 16MB
# LONGBLOB : 4GB

# ENUM
# 특정값의 목록을 정해두고 이 목록에 있는 값들만 입력할수있는 문자열 객체 타입



----------------------------------------------------------------------------------
DDL
# 테이블 생성 실습(학생 개인정보 저장 테이블)
create table user_save7(
-- 이름, 나이, 주소, 성별, 성적 
	s_name varchar(30) NOT NULL,
	age int NOT NULL,
	addr varchar(50),
	gender varchar(10),
	score int,
	s_score int not null auto_increment primary key
);


문자 타입 utf-8로 변경 
alter database DB_NAME character set = 'utf8mb4'

DDL
ALTER
 - ADD : 테이블 컬럼 추가
 - DROP : 테이블 컬럼 삭제
 - MODIFY COLUMN : 컬럼 변경(컬럼 타입 변경)
 - CHANGE : 컬럼명 변경시 사용(타입 변경에도 사용 가능)

ALTER table test.user_save7 ADD use_drop VARCHAR(14);

ALTER table test.user_save7 drop use_drop;

ALTER table test.user_save7 modify score varchar(10);

ALTER table test.user_save7 change s_phone phone varchar(20);

ALTER (TABLE or database)  (테이블_명 or DB_NAME) (ADD, DROP, MODIFY COLUMN, CHANGE) 컬럼명 타입설정 제약조건;

기존재하는 테이블에 신규 컬럼 추가시 제약조건에 따른 오류 발생 가능
add 주의사항
 ex) 신규 컬럼 추가시 unique 사용시 duplication 오류.
   (신규 컬럼이 추가되면, 모든 튜플에 null값을 삽입하며 null 이 중복됨)

drop 사용시 주의사항
 기본키나 외래키가 걸려있는 컬럼은 이론상 삭제가 가능함
다만, 그 과정이 복잡하고 최악의 경우에는 설계상의 문제를
일으킬 수 있음

DDL
DROP
 DROP TABLE table_name;
--------------------------------------------------


DML
-insert, delete, update, select
insert into table(column names...) values(values...);

 ex) insert into user_save7(s_name, age, addr, gender,score) values("aaaa",20, "길바닥","남",33);

퀴즈
1. 다음 조건을 충족하는 테이블 생성
 테이블명 quiz+유저번호 ex) quiz15
 컬럼
CREATE TABLE quiz7(
  q_code int auto_increment primary, -> 잘못썼었음. primary 만 적는게아니라 primary key 로 적어야함
  q_age int,
  q_name varchar(30) not null,
  q_gender varchar(10) not null
);

2. user_save(유저번호) 테이블 삭제
DROP TABLE user_save7;

3. quiz 테이블에 데이터 삽입
 insert into quiz7 values (15,"누렁이", "수컷");
 insert into quiz7 values (13,"탱고", "암컷");
 insert into quiz7 values (23,"토심이", "자웅동체");
 insert into quiz7 values (35,"오구", "모름");
 
 -insert 특이사항
 1. 컬럼명을 전부 적을 필요는 없음. 
 전제조건 : not null, unique, primary key 설정이 없어야함
 2. 컬럼 부분을 작성하지 않고 insert도 가능
 전제조건 : 모든 컬럼에 들어갈 값을 작성해야함.

 ----------------------------------------------------------------
 DML
# select
# 테이블(릴레이션)에서 원하는 row들을 조회할때 사용하는 명령어(키워드)

-- select [distinct, count] 컬럼명, alias, *
-- from 테이블명 (서브쿼리)
-- where 조건
-- order by
-- group by

-- sql 작성요령
-- 1. 대소문자 구분을 x(외부 서버에서는 철저히함. -> 테이블명, 컬럼명은 철저히함)
-- 2. sql문장(문법)은 반드시 한줄에만 입력하지는 않는다.
--    (여러줄도 입력가능)
-- 3. 키워드는 왠만하면 대문자를 추천하지만 사실 상관x
-- 4. ;을 이용하여 sql의 끝을 표시.
-- 5. select 절을 이해할때는 from -> select -> where 순으로 해석

# emp 테이블에 있는 empno, ename컬럼의 row값을 출력하는데
# 조건은 deptno 컬럼의 값이 10인 row들만 출력할것.
-- select empno, ename 
-- from EMP
-- where deptno=10;

# where절은 select에서는 다음의 연산자들을 추가하여 조건을 확장하거나 표현할수 있음.
# 1. between a And b
# 2. in
# 3. like
# 4. is null, is not null
# 5. not between a And b
# 6. not in
# 7. not like
use sqld;
# between a and b
# A와 B 사이의 데이터를 출력
# 급여가 800만원 이상 2450만원 이하인 직원들을 조회
select empno, ename, sal
from EMP
where sal between 800 and 2450;
# where sal >=800
#   and sal <=2450;

# ORDER BY -> 정렬(오름차순, 내림차순)
# 입사일자가 가장 빠른 사람순으로 조회해보기
# Limit : 데이터 조회 출력 제한
# ex ) limit 3 이라 써져있으면 조회결과가 아무리 많아도 최대 3건까지만 조회됨

# order by의 특징
# 1. 오름차순, 내림차순 기준 정렬(해당컬럼을 / 오름차순 asc 내림차순 desc)
# 2. order by는 select에서 가장 마지막에 작성
# 3. 꼭 컬럼1개만 기준이 되진 않음. 기본적으로 오름차순 정렬을 하지만
#    desc, asc으로 오름차순, 내림차순 정렬을 제어할수 있음.
-- select * from EMP
-- order by hiredate desc, sal asc;

# LIKE
# 검색값에 대한 와일드카드 검색을 위해서 쓰는 키워드
# % : 여러개의 문자열을 나타내는 와일드카드
# _ : 단 하나의 문자를 나타내는 와일드카드

-- LIKE "A%" : A로 시작하는 데이터만 검색
-- LIKE "%A" : A로 끝나는 데이터만 검색
-- LIKE "%GUNCHIM%" : 문자열에서 GUNCHIM 이라는 문자가 들어간 데이터만 검색
-- LIKE "%L%P%" : L, P가 있는 데이터들만 검색(L이나 P가 있는 데이터만 검색)
-- LIKE "_A" : A가 두번째에 위치해있는 데이터들만 검색
