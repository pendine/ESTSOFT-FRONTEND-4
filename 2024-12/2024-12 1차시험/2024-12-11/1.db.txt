4. 형변환

6. 집계 (Group by)
count, avg, sum, max, min


subquery
select 절에서 사용하는 서브쿼리
    - 스칼라 서브쿼리
from 절에서 사용하는 서브쿼리
    - 인라인 서브쿼리(인라인 뷰)
where 절에서 사용하는 서브쿼리
    - 단일 row 서브쿼리
    - 다중 row 서브쿼리


다중행 서브쿼리
다중행 서브쿼리만 연산관련 처리가 가능
in : 함수 내의 집합에 존재하는가 아닌가를 처리하는 함수


# 무결성 : 테이블에서 기본적으로 지켜야할 조건
#  - 테이블에 잘못된 데이터가 들어오는것은 최대한 방어.
#  - 사용자(일반유저/엔드유저)들이 입력을 잘못하는것을 최대한 막을수는 있지만
#     완벽히 방어는 불가능할수도 있음.
# 공일공 구칠이사 구칠이사<--- 숫자로 입력해주세요.(유효성검사 / validation check)
#  - 사용자의 입력을 최소화 하면 사용자가 잘못된 데이터를 입력할 가능성이 적어진다.
#  - UI개발자는 해줄만큼은 해줘야한다.
# 무결성이 지켜지지 않으면 장기적으로는 서비스에 문제가 일어날 가능성 매우 높아짐.
select * from EMP;
select * from DEPT;
use sqld;
# 데이터 무결성 : 데이터의 정확성, 일관성, 유효성이 유지되는것
# 개체무결성(기본키(pk) 제약) :
#  - 테이블은 특수한 목적이 있지 않다면 기본키를 지정하고
#    기본키에 따른 무결성 원칙을 지켜야한다(not null + unique) 
# 참조(외래키(fk) 제약)무결성
#  - 외래키 제약조건 : 외래키가 참조하는 테이블의 기본키 값이 존재해야함
#  - 부모 테이블에 존재하지 않는 값을 자식 테이블의 외래키로 참조는 불가.
#    (값이 일치해야 한다.)
#  - 데이터의 일관성 유지, 관계표현, 중복방지를 위해 필요.
# 도메인 무결성 : 각 속성을 미리 정의된 도메인 값만 가질수 있다.
#  - 허용 안하는값은 입력되지 않도록 제한하는것.
# NULL 무결성 : 컬럼의 제약조건이 not null 이라면 그 속성값은 null값이 절대 와선 안됨.
#  - 중복과는 관계없음.
# 관계 무결성 : 외래키 조건이나 row 삽입 가능 여부등의 적절성 여부 지정
# 키 무결성 : 하나의 테이블에는 적어도 하나의 키가 존재해야하는 조건.

# 경기도 안산시 단원구 이동 10번지 
# 4층 404호



# 우리가 ui 개발자일지라도 알고가야하는 db 용어
# 1. 인덱스(색인)
#  - 추가적인 작업(쓰기작업), 저장공간을 활용하여 데이터베이스 테이블의 검색속도를 향상시키기 위한
#     자료구조
#  - 데이터가 많을경우 처리 방식을 변경하여 데이터를 빠르게 조회할수 있도록 도움을 주는 개념.


# 우리가 ui 개발자일지라도 알고가야하는 db 용어
# 1. 인덱스(색인)
#  - 추가적인 작업(쓰기작업), 저장공간을 활용하여 데이터베이스 테이블의 검색속도를 향상시키기 위한
#     자료구조
#  - 데이터가 많을경우 처리 방식을 변경하여 데이터를 빠르게 조회할수 있도록 도움을 주는 개념.

# 인덱스의 종류

# 1. hashtable : key, value 타입의 데이터 저장 자료 구조
#    - key value타입의 특징은 key값은 중복이 안된다 라는 기준을 잡아야함.
#    - 부등호 연산이 자주 사용되는 DB 검색에는 부적합.
# 2. B+ tree : b- tree를 개량한 자료구조.
# 3. b- tree(가장 일반적인 인덱스.)
#  - 이진트리라는것을 개량한 자료구조

# - 옵티마이저 : 



# 2. 트랜잭션
#  - 데이터베이스의 상태를 변화시키기 위해 수행하는 '작업의 단위'
#  - 데이터 조작어 들은 데이터베이스의 상태를 변화시키는 작업.

# insert, update -> 바로 적용x
# 트랜잭션 특징(ACID)
# 원자성(Atomicity)
#  - 트랜잭션이 모두 반영 or 아예 반영x
#  - 작업의 처리는 단위별로 이루어진다.(유저별로)
#  - 만약 DB가 오작동 했을시 원인 찾기가 매우 힘들기때문.
# 일관성(Consistency)
#  - 작업 처리 결과의 일관성.
#  - 만약 업데이트가 진행중이라면 완료되기 전까지는 이전의 결과를 보여준다.
# 독립성(Isolation)
#  - A 유저가 B 유저의 작업을 강탈하거나 끼어들수 없다.
#  - 하나의 특정 트랜잭션이 완료되기 전까지는 다른 트랜잭션이 특정 트랜잭션의 결과를 참조할수 없다.
# 지속성(Durability)
#  - 트랜잭션(작업)이 commit(성공)이 완료된다면 결과는 영구적 반영(업데이트 삭제 전까지는.)

# 3. PL/SQL(프로시저)
#  - 자주 쓸만한 SQL문을 특정한 문법과 함께 저장해뒀다가 사용하는것.

# 예시
DELIMITER $$ 
DROP PROCEDURE IF EXISTS deleteReboard $$ #같은 이름이 있다면 지우기
CREATE PROCEDURE deleteReboard #저장 프로시저 생성 
( 
	#변수 선언 
    m_no INT, 
    m_step INT, 
    m_groupNo INT 
) 
BEGIN
      DECLARE cnt INT;
          SET cnt=0;
           IF m_step = 0 THEN
             SELECT COUNT(*) INTO cnt FROM reboard WHERE groupno=m_groupNo; 
           IF cnt > 1 THEN 
             UPDATE reboard SET delflag='Y' WHERE NO=m_no; 
           ELSE 
            DELETE FROM reboard WHERE NO=m_no; 
           END IF; 
END$$ 
DELIMITER ;
# 4. 트리거(방아쇠)
# - 테이블에서 어떤 이벤트가 발생했을때 자동으로 실행되는 개념.

# 주의사항
# - 편한건 맞음. 함부로 작성해서도 안됨.
# - 나는 어떤 상황인지 알지만 다른 개발자들은 이 상황을 모를수 있기에
#   트리거는 만들어두면 다른 팀원들도 트리거의 존재를 알아둘 필요가 있음.

# 5. ERD 설계 

# DCL 